name: Build Custom FFmpeg AAR for ARM64

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ffmpeg-aar:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        ndk-version: 26.1.10909125
        
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          curl \
          git \
          autoconf \
          automake \
          libtool \
          pkg-config \
          yasm \
          nasm \
          python3 \
          python3-pip \
          wget \
          unzip \
          ninja-build \
          meson
          
    - name: Set up environment variables
      run: |
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/26.1.10909125" >> $GITHUB_ENV
        echo "TOOLCHAIN=$ANDROID_SDK_ROOT/ndk/26.1.10909125/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV
        echo "PREFIX=$GITHUB_WORKSPACE/build/arm64" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$GITHUB_WORKSPACE/build/arm64/lib/pkgconfig" >> $GITHUB_ENV
        
    - name: Create build directories
      run: |
        mkdir -p $PREFIX/{bin,lib,include}
        mkdir -p build/src
        
    - name: Setup cross-compilation environment
      run: |
        export API=21
        export TARGET=aarch64-linux-android
        export CC=$TOOLCHAIN/bin/$TARGET$API-clang
        export CXX=$TOOLCHAIN/bin/$TARGET$API-clang++
        export AR=$TOOLCHAIN/bin/llvm-ar
        export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN/bin/llvm-strip
        export NM=$TOOLCHAIN/bin/llvm-nm
        
        echo "API=$API" >> $GITHUB_ENV
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV
        echo "AR=$AR" >> $GITHUB_ENV
        echo "RANLIB=$RANLIB" >> $GITHUB_ENV
        echo "STRIP=$STRIP" >> $GITHUB_ENV
        echo "NM=$NM" >> $GITHUB_ENV
        
    - name: Build x264 (H.264 encoder)
      run: |
        cd build/src
        git clone --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264
        ./configure \
          --host=aarch64-linux \
          --cross-prefix=$TOOLCHAIN/bin/aarch64-linux-android$API- \
          --sysroot=$TOOLCHAIN/sysroot \
          --prefix=$PREFIX \
          --enable-static \
          --enable-pic \
          --disable-cli
        make -j$(nproc)
        make install
        
    - name: Build x265 (H.265/HEVC encoder)
      run: |
        cd build/src
        git clone --depth 1 https://bitbucket.org/multicoreware/x265_git.git x265
        cd x265/build/linux
        cmake -G "Unix Makefiles" \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DENABLE_SHARED=OFF \
          -DENABLE_CLI=OFF \
          ../../source
        make -j$(nproc)
        make install
        
    - name: Build libvpx (VP8/VP9 codec)
      run: |
        cd build/src
        git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
        cd libvpx
        ./configure \
          --target=arm64-android-gcc \
          --prefix=$PREFIX \
          --disable-examples \
          --disable-unit-tests \
          --enable-vp8 \
          --enable-vp9 \
          --enable-pic \
          --as=yasm
        make -j$(nproc)
        make install
        
    - name: Build opus (audio codec)
      run: |
        cd build/src
        git clone --depth 1 https://gitlab.xiph.org/xiph/opus.git
        cd opus
        ./autogen.sh
        ./configure \
          --host=aarch64-linux-android \
          --prefix=$PREFIX \
          --enable-static \
          --disable-shared \
          --disable-doc \
          --disable-extra-programs
        make -j$(nproc)
        make install
        
    - name: Build libvorbis (Vorbis audio codec)
      run: |
        cd build/src
        git clone --depth 1 https://gitlab.xiph.org/xiph/ogg.git
        cd ogg
        ./autogen.sh
        ./configure \
          --host=aarch64-linux-android \
          --prefix=$PREFIX \
          --enable-static \
          --disable-shared
        make -j$(nproc)
        make install
        
        cd ..
        git clone --depth 1 https://gitlab.xiph.org/xiph/vorbis.git
        cd vorbis
        ./autogen.sh
        ./configure \
          --host=aarch64-linux-android \
          --prefix=$PREFIX \
          --enable-static \
          --disable-shared \
          --with-ogg=$PREFIX
        make -j$(nproc)
        make install
        
    - name: Build lame (MP3 encoder)
      run: |
        cd build/src
        wget -O lame-3.100.tar.gz https://sourceforge.net/projects/lame/files/lame/3.100/lame-3.100.tar.gz/download
        tar xzf lame-3.100.tar.gz
        cd lame-3.100
        ./configure \
          --host=aarch64-linux-android \
          --prefix=$PREFIX \
          --enable-static \
          --disable-shared \
          --disable-frontend
        make -j$(nproc)
        make install
        
    - name: Build libaom (AV1 codec)
      run: |
        cd build/src
        git clone --depth 1 https://aomedia.googlesource.com/aom
        cd aom
        mkdir build && cd build
        cmake -G "Unix Makefiles" \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DENABLE_SHARED=OFF \
          -DENABLE_EXAMPLES=OFF \
          -DENABLE_TOOLS=OFF \
          -DENABLE_TESTS=OFF \
          -DENABLE_DOCS=OFF \
          ..
        make -j$(nproc)
        make install
        
    - name: Build dav1d (AV1 decoder)
      run: |
        cd build/src
        git clone --depth 1 https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        meson setup build \
          --cross-file=package/crossfiles/aarch64-android.txt \
          --prefix=$PREFIX \
          --libdir=lib \
          --buildtype=release \
          --default-library=static \
          -Denable_tools=false \
          -Denable_tests=false
        ninja -C build
        ninja -C build install
        
    - name: Build libwebp (WebP image format)
      run: |
        cd build/src
        git clone --depth 1 https://chromium.googlesource.com/webm/libwebp
        cd libwebp
        ./autogen.sh
        ./configure \
          --host=aarch64-linux-android \
          --prefix=$PREFIX \
          --enable-static \
          --disable-shared \
          --disable-gl \
          --disable-sdl \
          --disable-png \
          --disable-jpeg \
          --disable-tiff \
          --disable-gif
        make -j$(nproc)
        make install
        
    - name: Build FFmpeg
      run: |
        cd build/src
        git clone --depth 1 --branch release/7.0 https://git.ffmpeg.org/ffmpeg.git
        cd ffmpeg
        
        ./configure \
          --cross-prefix=$TOOLCHAIN/bin/aarch64-linux-android$API- \
          --sysroot=$TOOLCHAIN/sysroot \
          --target-os=android \
          --arch=aarch64 \
          --cpu=armv8-a \
          --prefix=$PREFIX \
          --pkg-config-flags="--static" \
          --enable-cross-compile \
          --enable-static \
          --disable-shared \
          --enable-small \
          --disable-programs \
          --disable-ffmpeg \
          --disable-ffplay \
          --disable-ffprobe \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libvpx \
          --enable-libopus \
          --enable-libvorbis \
          --enable-libmp3lame \
          --enable-libaom \
          --enable-libdav1d \
          --enable-libwebp \
          --enable-gpl \
          --enable-version3 \
          --disable-debug \
          --disable-doc \
          --disable-htmlpages \
          --disable-manpages \
          --disable-podpages \
          --disable-txtpages \
          --disable-network \
          --disable-protocols \
          --enable-protocol=file \
          --enable-protocol=pipe \
          --disable-devices \
          --disable-indevs \
          --disable-outdevs \
          --disable-filters \
          --enable-filter=scale \
          --enable-filter=crop \
          --enable-filter=fps \
          --enable-filter=format \
          --enable-filter=null \
          --enable-filter=aresample \
          --enable-filter=aformat \
          --enable-filter=anull \
          --disable-demuxers \
          --enable-demuxer=mov \
          --enable-demuxer=mp4 \
          --enable-demuxer=avi \
          --enable-demuxer=matroska \
          --enable-demuxer=webm \
          --enable-demuxer=flv \
          --enable-demuxer=mp3 \
          --enable-demuxer=wav \
          --enable-demuxer=aac \
          --enable-demuxer=ogg \
          --enable-demuxer=flac \
          --disable-muxers \
          --enable-muxer=mp4 \
          --enable-muxer=mov \
          --enable-muxer=avi \
          --enable-muxer=matroska \
          --enable-muxer=webm \
          --enable-muxer=flv \
          --enable-muxer=mp3 \
          --enable-muxer=wav \
          --enable-muxer=aac \
          --enable-muxer=ogg \
          --enable-muxer=flac \
          --disable-decoders \
          --enable-decoder=h264 \
          --enable-decoder=hevc \
          --enable-decoder=vp8 \
          --enable-decoder=vp9 \
          --enable-decoder=av1 \
          --enable-decoder=mpeg4 \
          --enable-decoder=mpeg2video \
          --enable-decoder=mpeg1video \
          --enable-decoder=mjpeg \
          --enable-decoder=png \
          --enable-decoder=webp \
          --enable-decoder=aac \
          --enable-decoder=mp3 \
          --enable-decoder=opus \
          --enable-decoder=vorbis \
          --enable-decoder=flac \
          --enable-decoder=pcm_s16le \
          --enable-decoder=pcm_s24le \
          --enable-decoder=pcm_s32le \
          --disable-encoders \
          --enable-encoder=libx264 \
          --enable-encoder=libx265 \
          --enable-encoder=libvpx_vp8 \
          --enable-encoder=libvpx_vp9 \
          --enable-encoder=libaom_av1 \
          --enable-encoder=mjpeg \
          --enable-encoder=png \
          --enable-encoder=libwebp \
          --enable-encoder=aac \
          --enable-encoder=libmp3lame \
          --enable-encoder=libopus \
          --enable-encoder=libvorbis \
          --enable-encoder=flac \
          --enable-encoder=pcm_s16le \
          --enable-encoder=pcm_s24le \
          --enable-encoder=pcm_s32le
          
        make -j$(nproc)
        make install
        
    - name: Create Android project structure
      run: |
        mkdir -p android-project/src/main/{java/com/ffmpeg/kit,jniLibs/arm64-v8a,assets}
        
        # Copy native libraries
        cp $PREFIX/lib/*.a android-project/src/main/jniLibs/arm64-v8a/
        
        # Create AndroidManifest.xml
        cat > android-project/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.ffmpeg.kit">
            <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="34" />
        </manifest>
        EOF
        
    - name: Create JNI wrapper
      run: |
        cat > android-project/src/main/java/com/ffmpeg/kit/FFmpegKit.java << 'EOF'
        package com.ffmpeg.kit;
        
        public class FFmpegKit {
            static {
                System.loadLibrary("ffmpeg");
            }
            
            public static native int execute(String command);
            public static native String getVersion();
            public static native void cancel();
        }
        EOF
        
        # Create JNI C++ wrapper
        mkdir -p android-project/src/main/cpp
        cat > android-project/src/main/cpp/ffmpeg-kit-jni.cpp << 'EOF'
        #include <jni.h>
        #include <string>
        extern "C" {
        #include "libavformat/avformat.h"
        #include "libavcodec/avcodec.h"
        #include "libavutil/avutil.h"
        }
        
        extern "C" JNIEXPORT jint JNICALL
        Java_com_ffmpeg_kit_FFmpegKit_execute(JNIEnv *env, jclass clazz, jstring command) {
            // Implementation for FFmpeg execution
            return 0;
        }
        
        extern "C" JNIEXPORT jstring JNICALL
        Java_com_ffmpeg_kit_FFmpegKit_getVersion(JNIEnv *env, jclass clazz) {
            return env->NewStringUTF(av_version_info());
        }
        
        extern "C" JNIEXPORT void JNICALL
        Java_com_ffmpeg_kit_FFmpegKit_cancel(JNIEnv *env, jclass clazz) {
            // Implementation for canceling FFmpeg execution
        }
        EOF
        
    - name: Create build.gradle for AAR
      run: |
        cat > android-project/build.gradle << 'EOF'
        plugins {
            id 'com.android.library'
        }
        
        android {
            namespace 'com.ffmpeg.kit'
            compileSdk 34
            
            defaultConfig {
                minSdk 21
                targetSdk 34
                
                ndk {
                    abiFilters 'arm64-v8a'
                }
                
                externalNativeBuild {
                    cmake {
                        cppFlags '-std=c++17'
                        arguments '-DANDROID_STL=c++_shared'
                    }
                }
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                    consumerProguardFiles 'consumer-rules.pro'
                }
            }
            
            externalNativeBuild {
                cmake {
                    path 'src/main/cpp/CMakeLists.txt'
                    version '3.22.1'
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
        }
        EOF
        
    - name: Create CMakeLists.txt
      run: |
        cat > android-project/src/main/cpp/CMakeLists.txt << EOF
        cmake_minimum_required(VERSION 3.22.1)
        project("ffmpeg-kit")
        
        set(FFMPEG_ROOT $PREFIX)
        
        add_library(ffmpeg-kit SHARED ffmpeg-kit-jni.cpp)
        
        target_include_directories(ffmpeg-kit PRIVATE \${FFMPEG_ROOT}/include)
        
        target_link_libraries(ffmpeg-kit
            \${FFMPEG_ROOT}/lib/libavformat.a
            \${FFMPEG_ROOT}/lib/libavcodec.a
            \${FFMPEG_ROOT}/lib/libavutil.a
            \${FFMPEG_ROOT}/lib/libswresample.a
            \${FFMPEG_ROOT}/lib/libswscale.a
            \${FFMPEG_ROOT}/lib/libavfilter.a
            \${FFMPEG_ROOT}/lib/libx264.a
            \${FFMPEG_ROOT}/lib/libx265.a
            \${FFMPEG_ROOT}/lib/libvpx.a
            \${FFMPEG_ROOT}/lib/libopus.a
            \${FFMPEG_ROOT}/lib/libvorbis.a
            \${FFMPEG_ROOT}/lib/libvorbisenc.a
            \${FFMPEG_ROOT}/lib/libogg.a
            \${FFMPEG_ROOT}/lib/libmp3lame.a
            \${FFMPEG_ROOT}/lib/libaom.a
            \${FFMPEG_ROOT}/lib/libdav1d.a
            \${FFMPEG_ROOT}/lib/libwebp.a
            log
            z
            m
        )
        EOF
        
    - name: Create gradle wrapper and settings
      run: |
        cd android-project
        cat > settings.gradle << 'EOF'
        rootProject.name = "ffmpeg-kit"
        EOF
        
        cat > gradle.properties << 'EOF'
        android.useAndroidX=true
        android.enableJetifier=true
        org.gradle.jvmargs=-Xmx2048m
        EOF
        
        # Create gradle wrapper
        gradle wrapper --gradle-version 8.4
        
    - name: Build AAR
      run: |
        cd android-project
        ./gradlew assembleRelease
        
    - name: Upload AAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-kit-arm64
        path: android-project/build/outputs/aar/*.aar
        
    - name: Create release info
      run: |
        echo "# FFmpeg Custom Build" > release-info.md
        echo "Built on: $(date)" >> release-info.md
        echo "Architecture: ARM64 only" >> release-info.md
        echo "" >> release-info.md
        echo "## Included Libraries:" >> release-info.md
        echo "- x264 (H.264 encoder)" >> release-info.md
        echo "- x265 (H.265/HEVC encoder)" >> release-info.md
        echo "- libvpx (VP8/VP9 codec)" >> release-info.md
        echo "- opus (audio codec)" >> release-info.md
        echo "- libvorbis (Vorbis audio codec)" >> release-info.md
        echo "- lame (MP3 encoder)" >> release-info.md
        echo "- libaom (AV1 encoder)" >> release-info.md
        echo "- dav1d (AV1 decoder)" >> release-info.md
        echo "- libwebp (WebP image format)" >> release-info.md
        echo "" >> release-info.md
        echo "## Excluded:" >> release-info.md
        echo "- Streaming protocols (RTMP, HLS, etc.)" >> release-info.md
        echo "- Network protocols" >> release-info.md
        echo "- Deprecated/legacy codecs" >> release-info.md
        echo "- Unused devices and filters" >> release-info.md
        
    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: release-info.md

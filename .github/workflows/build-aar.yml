name: Build FFmpeg AAR for Android

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  ANDROID_NDK_VERSION: "26.1.10909125"
  ANDROID_API_LEVEL: "24"
  FFMPEG_VERSION: "6.1"
  GRADLE_VERSION: "8.4"
  AGP_VERSION: "8.1.4"

jobs:
  # 1. Build native FFmpeg libraries and cache results
  build-native:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: [arm64-v8a]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1.5.0
        with:
          ndk-version: ${{ env.ANDROID_NDK_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            cmake git pkg-config yasm ninja-build autoconf automake libtool wget curl unzip

      - name: Cache FFmpeg sources & libs
        uses: actions/cache@v3
        with:
          path: |
            build/src
            build/libs
            build/output
          key: ${{ runner.os }}-ffmpeg-${{ env.FFMPEG_VERSION }}-${{ matrix.abi }}
          restore-keys: |
            ${{ runner.os }}-ffmpeg-${{ env.FFMPEG_VERSION }}-

      - name: Prepare build directories
        run: mkdir -p build/{src,libs,output,toolchain}

      - name: Configure toolchain env
        run: |
          export TOOLCHAIN_ROOT="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64"
          echo "TOOLCHAIN_ROOT=$TOOLCHAIN_ROOT" >> $GITHUB_ENV
          echo "TARGET=aarch64-linux-android" >> $GITHUB_ENV
          echo "API=${{ env.ANDROID_API_LEVEL }}" >> $GITHUB_ENV
          echo "AR=$TOOLCHAIN_ROOT/bin/llvm-ar" >> $GITHUB_ENV
          echo "CC=$TOOLCHAIN_ROOT/bin/aarch64-linux-android${{ env.ANDROID_API_LEVEL }}-clang" >> $GITHUB_ENV
          echo "RANLIB=$TOOLCHAIN_ROOT/bin/llvm-ranlib" >> $GITHUB_ENV
          # Create CMake toolchain file
          cat > build/toolchain/android.cmake << EOF
          set(CMAKE_SYSTEM_NAME Android)
          set(CMAKE_SYSTEM_VERSION ${{ env.ANDROID_API_LEVEL }})
          set(CMAKE_ANDROID_ARCH_ABI ${{ matrix.abi }})
          set(CMAKE_ANDROID_NDK $ANDROID_NDK_ROOT)
          set(CMAKE_ANDROID_STL_TYPE c++_shared)
          EOF

      - name: Build libogg (1.3.5)
        run: |
          cd build/src && git clone --depth 1 --branch v1.3.5 https://github.com/xiph/ogg.git
          cd ogg && ./autogen.sh && \
          ./configure --host=aarch64-linux-android --disable-shared --enable-static --prefix=$(pwd)/../libs/ogg AR="$AR" CC="$CC" RANLIB="$RANLIB" && \
          make -j$(nproc) && make install

      - name: Build x264 (stable)
        run: |
          cd build/src && git clone --depth 1 --branch stable https://code.videolan.org/videolan/x264.git
          cd x264 && \
          ./configure --host=aarch64-linux-android --cross-prefix="$TOOLCHAIN_ROOT/bin/llvm-" --sysroot="$TOOLCHAIN_ROOT/sysroot" --enable-static --enable-pic --disable-cli --disable-asm --prefix=$(pwd)/../libs/x264 && \
          make -j$(nproc) && make install

      - name: Build libopus (1.4)
        run: |
          cd build/src && git clone --depth 1 --branch v1.4 https://github.com/xiph/opus.git
          cd opus && ./autogen.sh && \
          ./configure --host=aarch64-linux-android --disable-shared --enable-static --prefix=$(pwd)/../libs/opus AR="$AR" CC="$CC" RANLIB="$RANLIB" && \
          make -j$(nproc) && make install

      - name: Build libvorbis (1.3.7)
        run: |
          export PKG_CONFIG_PATH="$(pwd)/build/libs/ogg/lib/pkgconfig"
          cd build/src && git clone --depth 1 --branch v1.3.7 https://github.com/xiph/vorbis.git
          cd vorbis && ./autogen.sh && \
          ./configure --host=aarch64-linux-android --disable-shared --enable-static --prefix=$(pwd)/../libs/vorbis --with-ogg=$(pwd)/../libs/ogg AR="$AR" CC="$CC" RANLIB="$RANLIB" && \
          make -j$(nproc) && make install

      - name: Build libmp3lame (3.100)
        run: |
          cd build/src && wget -O lame-3.100.tar.gz "https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz"
          tar -xzf lame-3.100.tar.gz && cd lame-3.100 && \
          ./configure --host=aarch64-linux-android --disable-shared --enable-static --prefix=$(pwd)/../libs/lame AR="$AR" CC="$CC" RANLIB="$RANLIB" && \
          make -j$(nproc) && make install

      - name: Build FFmpeg
        run: |
          cd build/src && wget -O ffmpeg-${{ env.FFMPEG_VERSION }}.tar.xz https://ffmpeg.org/releases/ffmpeg-${{ env.FFMPEG_VERSION }}.tar.xz
          tar -xf ffmpeg-${{ env.FFMPEG_VERSION }}.tar.xz && cd ffmpeg-${{ env.FFMPEG_VERSION }}
          export PKG_CONFIG_PATH="$(pwd)/../libs/x264/lib/pkgconfig:$(pwd)/../libs/opus/lib/pkgconfig:$(pwd)/../libs/vorbis/lib/pkgconfig:$(pwd)/../libs/ogg/lib/pkgconfig:$(pwd)/../libs/lame/lib/pkgconfig"
          export CFLAGS="-fPIC -DANDROID -D__ANDROID_API__=$API"
          export CPPFLAGS="$CFLAGS"
          ./configure \
            --cross-prefix="$TOOLCHAIN_ROOT/bin/llvm-" \
            --sysroot="$TOOLCHAIN_ROOT/sysroot" \
            --target-os=android --arch=aarch64 --cpu=armv8-a \
            --cc="$CC" --ar="$AR" --ranlib="$RANLIB" \
            --enable-cross-compile --enable-gpl --disable-shared --enable-static \
            --disable-programs --disable-doc --disable-network \
            --enable-protocol=file --enable-protocol=pipe \
            --enable-encoder=aac --enable-decoder=h264 --enable-decoder=aac \
            --extra-cflags="$CFLAGS -I$(pwd)/../libs/x264/include -I$(pwd)/../libs/opus/include -I$(pwd)/../libs/vorbis/include -I$(pwd)/../libs/ogg/include -I$(pwd)/../libs/lame/include" \
            --extra-ldflags="-L$(pwd)/../libs/x264/lib -L$(pwd)/../libs/opus/lib -L$(pwd)/../libs/vorbis/lib -L$(pwd)/../libs/ogg/lib -L$(pwd)/../libs/lame/lib" \
            --prefix=$(pwd)/../output/ffmpeg
          make -j$(nproc) && make install

      - name: Upload native artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-native-${{ matrix.abi }}
          path: build/output/ffmpeg

  # 2. Assemble Android AAR using prebuilt native libs
  assemble-aar:
    runs-on: ubuntu-latest
    needs: build-native
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download native artifacts
        uses: actions/download-artifact@v3
        with:
          name: ffmpeg-native-arm64-v8a
          path: android-project/prebuilt

      - name: Copy native libs to Android project
        run: |
          mkdir -p android-project/app/src/main/cpp/include
          cp -r android-project/prebuilt/include android-project/app/src/main/cpp/
          cp android-project/prebuilt/lib/*.a android-project/app/src/main/cpp/lib/

      - name: Setup JDK & Android SDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Android SDK & Cache
        uses: maxim-lobanov/setup-android-tools@v1
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          components: build-tools;34.0.0,platforms;android-34
          cache: true

      - name: Build AAR
        run: |
          cd android-project
          ./gradlew clean assembleRelease --info --stacktrace

      - name: Upload AAR
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-aar-arm64-${{ env.FFMPEG_VERSION }}
          path: android-project/app/build/outputs
